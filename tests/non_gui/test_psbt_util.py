#
# Bitcoin Safe
# Copyright (C) 2024 Andreas Griffin
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of version 3 of the GNU General Public License as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see https://www.gnu.org/licenses/gpl-3.0.html
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
# BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
# ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.


import bdkpython as bdk
from bitcoin_qr_tools.data import Data
from bitcoin_safe_lib.tx_util import serialized_to_hex
from pytestqt.qtbot import QtBot

from bitcoin_safe.psbt_util import SimpleOutput, SimplePSBT
from bitcoin_safe.pythonbdk_types import TxOut
from bitcoin_safe.signer import AbstractSignatureImporter

p2wsh_psbt_0_2of3 = bdk.Psbt(
    "cHNidP8BAIkBAAAAATqahH4QTEKfxm6qlALcWC5h8D9bjKFoW0VRfm4auf4aAAAAAAD9////AvQBAAAAAAAAIgAgsCBsnrRoOkUsY175u3Fa6vNXXwsSNbf4mDWFFvXODJH0AQAAAAAAACIAIPVnTHBKqnziIq5ov/TvQ8nNJYQ1MakbfdY7VMXIJbnpR8EmAAABAH0BAAAAAYMWmPX/X+Jq1QzTenGMmtvdeaMYEKYf7Nli0gzb+7C0AAAAAAD9////AugDAAAAAAAAIgAgHWI4I8UK5PLP+DtAXdlRI8Sts/PIRh1ksMD6iKlk/r6/GgAAAAAAABYAFNiY7EiZrTSaq0ipS+jFKXBQep4ON8EmAAEBK+gDAAAAAAAAIgAgHWI4I8UK5PLP+DtAXdlRI8Sts/PIRh1ksMD6iKlk/r4BBWlSIQIyOXzeZut4A5aUyMNWJy0Opx5iGruvdPBowW71rVQ1piEDDuRS5miVqUzK3RnF0adROAfU5jFNecF4zZ5TPebcRUMhAxU1ObeArGZ6bGPcb/KWg98LPu3Jj5wzMr9mDNI31ta0U64iBgIyOXzeZut4A5aUyMNWJy0Opx5iGruvdPBowW71rVQ1phixB43FVAAAgAEAAIAAAACAAAAAABUAAAAiBgMO5FLmaJWpTMrdGcXRp1E4B9TmMU15wXjNnlM95txFQxjRua98VAAAgAEAAIAAAACAAAAAABUAAAAiBgMVNTm3gKxmemxj3G/yloPfCz7tyY+cMzK/ZgzSN9bWtBiBe43+VAAAgAEAAIAAAACAAAAAABUAAAAAAQFpUiECwFSVDN1wlaOC4Xh3Vz8f1Fe1R3C9BnOEctx14BcM/vAhAvWDA1HgThJW6S0Buq4+ribWkdx/+Mq1qsmRr4XPMC1BIQNmWAeip+z4mEdQsVP1K0vLgB/pAvW5A/Vf5wi3tfahM1OuIgICwFSVDN1wlaOC4Xh3Vz8f1Fe1R3C9BnOEctx14BcM/vAYgXuN/lQAAIABAACAAAAAgAEAAAAVAAAAIgIC9YMDUeBOElbpLQG6rj6uJtaR3H/4yrWqyZGvhc8wLUEYsQeNxVQAAIABAACAAAAAgAEAAAAVAAAAIgIDZlgHoqfs+JhHULFT9StLy4Af6QL1uQP1X+cIt7X2oTMY0bmvfFQAAIABAACAAAAAgAEAAAAVAAAAAAEBaVIhAibQDjOdARwmI9G/ZnarEd23QZ/bskSSk5pzTsSbppqXIQNVWIlGZfiE5uzg9WV4Kkn7P+sdkX4mXCalj4wWRNH1dCED5H+E6OnZns/lomlsiSKclAcFlG7AZROwRk/voGCezotTriICAibQDjOdARwmI9G/ZnarEd23QZ/bskSSk5pzTsSbppqXGLEHjcVUAACAAQAAgAAAAIAAAAAAFAAAACICA1VYiUZl+ITm7OD1ZXgqSfs/6x2RfiZcJqWPjBZE0fV0GNG5r3xUAACAAQAAgAAAAIAAAAAAFAAAACICA+R/hOjp2Z7P5aJpbIkinJQHBZRuwGUTsEZP76Bgns6LGIF7jf5UAACAAQAAgAAAAIAAAAAAFAAAAAA="
)
p2wsh_psbt_1_2of3 = bdk.Psbt(
    "cHNidP8BAIkBAAAAATqahH4QTEKfxm6qlALcWC5h8D9bjKFoW0VRfm4auf4aAAAAAAD9////AlgCAAAAAAAAIgAgsCBsnrRoOkUsY175u3Fa6vNXXwsSNbf4mDWFFvXODJGQAQAAAAAAACIAIP0Ts8vJczsQLi1FvMD/RkcQMQqvjX5Uyh98yNm5KKhzR8EmAAABAH0BAAAAAYMWmPX/X+Jq1QzTenGMmtvdeaMYEKYf7Nli0gzb+7C0AAAAAAD9////AugDAAAAAAAAIgAgHWI4I8UK5PLP+DtAXdlRI8Sts/PIRh1ksMD6iKlk/r6/GgAAAAAAABYAFNiY7EiZrTSaq0ipS+jFKXBQep4ON8EmAAEBK+gDAAAAAAAAIgAgHWI4I8UK5PLP+DtAXdlRI8Sts/PIRh1ksMD6iKlk/r4iAgIyOXzeZut4A5aUyMNWJy0Opx5iGruvdPBowW71rVQ1pkcwRAIgKXaWbCmWs8FwBTQu67YBM3QShkYLE1Ag3LTyCJYp2FECIERAKtoA3GrLQED0QJn1N6E49FWMsQ+HRlbZ1UShmw9uAQEFaVIhAjI5fN5m63gDlpTIw1YnLQ6nHmIau6908GjBbvWtVDWmIQMO5FLmaJWpTMrdGcXRp1E4B9TmMU15wXjNnlM95txFQyEDFTU5t4CsZnpsY9xv8paD3ws+7cmPnDMyv2YM0jfW1rRTriIGAjI5fN5m63gDlpTIw1YnLQ6nHmIau6908GjBbvWtVDWmGLEHjcVUAACAAQAAgAAAAIAAAAAAFQAAACIGAw7kUuZolalMyt0ZxdGnUTgH1OYxTXnBeM2eUz3m3EVDGNG5r3xUAACAAQAAgAAAAIAAAAAAFQAAACIGAxU1ObeArGZ6bGPcb/KWg98LPu3Jj5wzMr9mDNI31ta0GIF7jf5UAACAAQAAgAAAAIAAAAAAFQAAAAABAWlSIQLAVJUM3XCVo4LheHdXPx/UV7VHcL0Gc4Ry3HXgFwz+8CEC9YMDUeBOElbpLQG6rj6uJtaR3H/4yrWqyZGvhc8wLUEhA2ZYB6Kn7PiYR1CxU/UrS8uAH+kC9bkD9V/nCLe19qEzU64iAgLAVJUM3XCVo4LheHdXPx/UV7VHcL0Gc4Ry3HXgFwz+8BiBe43+VAAAgAEAAIAAAACAAQAAABUAAAAiAgL1gwNR4E4SVuktAbquPq4m1pHcf/jKtarJka+FzzAtQRixB43FVAAAgAEAAIAAAACAAQAAABUAAAAiAgNmWAeip+z4mEdQsVP1K0vLgB/pAvW5A/Vf5wi3tfahMxjRua98VAAAgAEAAIAAAACAAQAAABUAAAAAAQFpUiEDHmZf8lOi367yritD9OBEELdnlxBDQJ8RJ6K4XOLEj4chAzEeI4tAmDMbcRnTWKK8hLiBt0B4SGwxjNipmdepFuElIQM0k/Q5IHXpN2wyoRpv4qs0vvdDu1faStzIJdnmttWKJ1OuIgIDHmZf8lOi367yritD9OBEELdnlxBDQJ8RJ6K4XOLEj4cYsQeNxVQAAIABAACAAAAAgAAAAAASAAAAIgIDMR4ji0CYMxtxGdNYoryEuIG3QHhIbDGM2KmZ16kW4SUYgXuN/lQAAIABAACAAAAAgAAAAAASAAAAIgIDNJP0OSB16TdsMqEab+KrNL73Q7tX2krcyCXZ5rbViicY0bmvfFQAAIABAACAAAAAgAAAAAASAAAAAA=="
)
p2wsh_psbt_0_1of1 = bdk.Psbt(
    "cHNidP8BAH0BAAAAAaQmHDnvyNh3SMhYOptNUIbCEqkDyPUodsbshbyX6CS0BAAAAAD9////Ag7sSgAAAAAAFgAUgoFgSJlKKMq7iF1ZDLpqI6LlmrNwCAAAAAAAACIAIMXCKrkjoq9gCSacmVRW8+0qcwFyVWLQ3BLW2+NXV2FvScEmAAABAP3JAgIAAAABGju6Rif4mlNuTLV/JJ8FQXSUgrCxyBJqlomo3JzHVQoDAAAAAP3///8VtRExAAAAAAAWABSUfKgf8Gx4DtgCPlIV6SsF+I8FIZ5+QAAAAAAAFgAU7G63L/EV40CsWrmOVQAOV65hBUvMCVgAAAAAABepFMGNsv6av40/TGJOBGcbAjdCre5Gh+vLVQAAAAAAFgAUtwEGAFOlSqg/RCd8YV68tofpCAp+9EoAAAAAABYAFFOV8HAr7QNkAxVeo9K3poeglnA+poFaAAAAAAAWABSdWbWW0ehRFZbmTDHeo4g0P5ir+5S1SQAAAAAAGXapFDSAYPDISc0pYwcDv4jwuVIGhivgiKxfMlsAAAAAABYAFEIk7/vegOj1pmzNuNZAT11h7WuBV15PAAAAAAAXqRQ78S6GgebV361WMM6M/QRcPT1yj4dZZVsAAAAAABYAFKhkrTqxWd91WXwYtGORcNKuFl6QRJtZAAAAAAAWABS5WAprwfREeKtY0GSWEWUH/1fToNp0OQAAAAAAFgAUwy6wUb6UAvQ1qSTOMqZYzQoW0eEm0RazCAAAABYAFA/anu1dQBUKkO9aT8fFgtqOMpdRIRpXAAAAAAAZdqkU8pU2T3qf52tAfiNHPGx3rbJs/lCIrFK6LwAAAAAAFgAUA/DGv8DpP5AFAuCXfnkkxhnqP5GZDDoAAAAAABYAFCWRr8XphrCCO12RgcBKBDeGPDKGUkBQAAAAAAAWABQ74FXbsmiaoQKI20bzjnQwADs4LZiAPQAAAAAAFgAUMPAzgfc+NEQL+pJORoRmTqOLYi8Ccj8AAAAAABl2qRSzACucy7pGjjmIKQcya8TrDbBsj4isjIZSAAAAAAAWABS4SLqL0rXvVQUFqtTwd4b+3SHJQds4TgAAAAAAFgAUb4/333FxheUn7aTLWs8VCpZiLBgMviYAAQEffvRKAAAAAAAWABRTlfBwK+0DZAMVXqPSt6aHoJZwPiIGA4jB53vBV2PnTemvac24lRGSIc3BRfE3+eKvQzuTVdyuGL1fmV1UAACAAQAAgAAAAIAAAAAAFQAAAAAiAgMyP6YEUOBpARAkuF3hRA4AztrQpJbZ02gSnyo9Jivz5Ri9X5ldVAAAgAEAAIAAAACAAQAAABgAAAAAAA=="
)
p2wsh_psbt_1_1of1 = bdk.Psbt(
    "cHNidP8BAH0BAAAAAaQmHDnvyNh3SMhYOptNUIbCEqkDyPUodsbshbyX6CS0BAAAAAD9////ApbwSgAAAAAAFgAU2JjsSJmtNJqrSKlL6MUpcFB6ng7oAwAAAAAAACIAIB1iOCPFCuTyz/g7QF3ZUSPErbPzyEYdZLDA+oipZP6+KMEmAAABAP3JAgIAAAABGju6Rif4mlNuTLV/JJ8FQXSUgrCxyBJqlomo3JzHVQoDAAAAAP3///8VtRExAAAAAAAWABSUfKgf8Gx4DtgCPlIV6SsF+I8FIZ5+QAAAAAAAFgAU7G63L/EV40CsWrmOVQAOV65hBUvMCVgAAAAAABepFMGNsv6av40/TGJOBGcbAjdCre5Gh+vLVQAAAAAAFgAUtwEGAFOlSqg/RCd8YV68tofpCAp+9EoAAAAAABYAFFOV8HAr7QNkAxVeo9K3poeglnA+poFaAAAAAAAWABSdWbWW0ehRFZbmTDHeo4g0P5ir+5S1SQAAAAAAGXapFDSAYPDISc0pYwcDv4jwuVIGhivgiKxfMlsAAAAAABYAFEIk7/vegOj1pmzNuNZAT11h7WuBV15PAAAAAAAXqRQ78S6GgebV361WMM6M/QRcPT1yj4dZZVsAAAAAABYAFKhkrTqxWd91WXwYtGORcNKuFl6QRJtZAAAAAAAWABS5WAprwfREeKtY0GSWEWUH/1fToNp0OQAAAAAAFgAUwy6wUb6UAvQ1qSTOMqZYzQoW0eEm0RazCAAAABYAFA/anu1dQBUKkO9aT8fFgtqOMpdRIRpXAAAAAAAZdqkU8pU2T3qf52tAfiNHPGx3rbJs/lCIrFK6LwAAAAAAFgAUA/DGv8DpP5AFAuCXfnkkxhnqP5GZDDoAAAAAABYAFCWRr8XphrCCO12RgcBKBDeGPDKGUkBQAAAAAAAWABQ74FXbsmiaoQKI20bzjnQwADs4LZiAPQAAAAAAFgAUMPAzgfc+NEQL+pJORoRmTqOLYi8Ccj8AAAAAABl2qRSzACucy7pGjjmIKQcya8TrDbBsj4isjIZSAAAAAAAWABS4SLqL0rXvVQUFqtTwd4b+3SHJQds4TgAAAAAAFgAUb4/333FxheUn7aTLWs8VCpZiLBgMviYAAQEffvRKAAAAAAAWABRTlfBwK+0DZAMVXqPSt6aHoJZwPiIGA4jB53vBV2PnTemvac24lRGSIc3BRfE3+eKvQzuTVdyuGL1fmV1UAACAAQAAgAAAAIAAAAAAFQAAAAEHAAEIawJHMEQCIES4GSlpjaAzwcOwQcfwXrKUSatQ1EJGqPUfokLrpPOmAiBiQ4hOQWCs3RCYiSJFBrke9cDfOv3MWwfbLpBJTwiFIQEhA4jB53vBV2PnTemvac24lRGSIc3BRfE3+eKvQzuTVdyuACICAkhCjgk5sNSHM7qWEB5GBE1wOgzX8TgsX8WvQ29TKmwmGL1fmV1UAACAAQAAgAAAAIABAAAAFwAAAAAA"
)
p2wsh_psbt_0_2of2 = bdk.Psbt(
    "cHNidP8BAF4BAAAAAVyII/3MnpvJH/mUDuI5/plvoHrYnDzN3l46GCHDw3jRAQAAAAD9////AeqVmAAAAAAAIgAgb83e3INZvI9rBf6gKdQTL4tuVlpxteYygGLSc5ye/gJyAAAAAAEA9gIAAAAAAQGq9XxjX3p/EmPGaAvQ6eSmb0v+HFDbcPishlCQfexzqAAAAAAA/f///wLbWm0pAQAAACJRIEbZRee2bMwBN832yNf6QSg7KlmQrfCgzWkh8akScJY2gJaYAAAAAAAiACCxLbtsPZ/hUDNT0mxCFTmuIicAVyFHrKpPnAFt8ZPcegJHMEQCICtbM+5oCgo/HJ1cKYMGlKpcpD2vXP7EPVf712zir3cXAiAgEuWrr5aQ7p0Rpk22Pu/Uz1jlMI9d8uW60LpLRPcsawEhAvw/tdT/dxVawrrhag+GZv2Iget2sSDkQWGWukU2j7RacQAAAAEBK4CWmAAAAAAAIgAgsS27bD2f4VAzU9JsQhU5riInAFchR6yqT5wBbfGT3HoBBUdSIQM1xpdsCZwQc5cwloOvFESmFnzIupalCdzU+4ZpiiLLGiEDWVqKM/KzdkrkwmRMGIT5JQLGhJTWxFjhE0Q3Rnws1AFSriIGAzXGl2wJnBBzlzCWg68URKYWfMi6lqUJ3NT7hmmKIssaHCWX5CkwAACAAQAAgAAAAIACAACAAAAAAAAAAAAiBgNZWooz8rN2SuTCZEwYhPklAsaElNbEWOETRDdGfCzUARxbNzD7MAAAgAEAAIAAAACAAgAAgAAAAAAAAAAAAAEBR1IhAnKcTGCT2jP+TCH/UYHolu3ifas7ZNqf5wTR3MNhbdHqIQKQZYWFA77hl8m6W7L183FxzG/jYpI2Ht5KqfMb1zKHiVKuIgICcpxMYJPaM/5MIf9RgeiW7eJ9qztk2p/nBNHcw2Ft0eocWzcw+zAAAIABAACAAAAAgAIAAIAAAAAAAgAAACICApBlhYUDvuGXybpbsvXzcXHMb+NikjYe3kqp8xvXMoeJHCWX5CkwAACAAQAAgAAAAIACAACAAAAAAAIAAAAA"
)


p2sh_0_2of3 = bdk.Psbt(
    "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"
)
p2sh_1_2of3 = bdk.Psbt(
    "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"
)
p2sh_2_2of3 = bdk.Psbt(
    "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"
)
finalized_p2sh_2_2of3 = "0200000000010120d97e06698e1fde1c2aa16644e7b6e3a738d4248d01d809c0de928b965b758c0000000000fdffffff02382300000000000022002085e5c06799901c9851b41182de64e950679ddd08d1595368db79f4290cfd34c8fbc6f40000000000220020abf458e9bb1147cf7ec96210c4f04a663628f024eebf7ab74a7499e3391b5d1b040047304402204d29db00b84e361dfa12d8f0a664da93f1c3c844eb726788bbd09e09a8ea468702201f0616a1b1ceb0c9f2e5d8133fbaa30d42a5cc629a0ca80a57f1a7656835b1e30147304402203f6a8d44045a01cdbf442c6e9088cfb29b9d30abe49a6d1be8db754fd64ef4bc02203d8e1533b6d9c79b84f2158c5756cde0759e6589c4021de2deffad34c5396a6501695221028444c9ad6c8cb75011b3cbcf6daa9ae7025b0ac22fa3424a48d326c9e6828cb921028f21d9edd6214abb9519356ac701f07a3f97b502e47ce82405d1e130d6a96f412103cc3bf2cb38bfbf03264b567490ed45cd09f465843b0fc7a8dd1be9b852816e0053ae440a0000"


tr_psbt_singlesig = bdk.Psbt(
    "cHNidP8BAHECAAAAAfc8OTZ1lwGfdsQYtGNkagaQickWG4BKHmZG11z6jENVAAAAAAD9////AuNumAAAAAAAFgAULBPZmpWliCJvS9JfRjU1xY4/a+0QJwAAAAAAABYAFA7vht2KmTsl9kHbl+qMDvIicelk6AsAAE8BBDWHzwPgd1yRgAAAALcdj3ToaudlDTGslwRJvm7g8bEn34xNlZ5c3yWnEs8PAqvQsA03r8jZ4FETWO4vALJ/v6Rvyuk/OTqMIB79yvRdEOU8gIlUAACAAQAAgAAAAIAAAQDDAgAAAAPbVtMGYFQSsEm5Nz2qvUjMPMkoMAamoM32u5UMvpXBMAAAAAAA/f///1QZoiAuQ/zWu6Vc3Eqo4RWVzE7VL5DVBMnmzzBBSsbTAAAAAAD9////rhbVAngHB4XGoKTYkFPV5paz+M8D5nfpSF88aRjMVygAAAAAAP3///8CgJaYAAAAAAAWABQO74bdipk7JfZB25fqjA7yInHpZI9qAwAAAAAAFgAUUbwvrjZUlnjlSl2c8FE6v4a8b+cAAAAAAQEfgJaYAAAAAAAWABQO74bdipk7JfZB25fqjA7yInHpZAEDBAEAAAAiBgN8MoL8601Pb/4y5uJJv/4xEkrn6XzFmsoAcT7vC5nC+hjlPICJVAAAgAEAAIAAAACAAAAAAAAAAAAAIgIDcQeSZ26vzpWz9YzgAjr4ht0Qaqsp8cbgNq9VOpd4wWQY5TyAiVQAAIABAACAAAAAgAEAAAAAAAAAACICA3wygvzrTU9v/jLm4km//jESSufpfMWaygBxPu8LmcL6GOU8gIlUAACAAQAAgAAAAIAAAAAAAAAAAAA="
)


electrum_psbt = bdk.Psbt(
    "cHNidP8BAHECAAAAAbR3JvzWV6Qu24KGIZSgovQ4xl8T2n0fckKwrfF/+9MJAQAAAAD9////AiBOAAAAAAAAFgAUqQ0J0HaqDjSnSFAc0SzKaMuSyAkoBDYMAAAAABYAFM30QO9i8Pj8HI4iRZPJeWUH9/eX6AsAAAABAR8YpTYMAAAAABYAFE5GnvIzBc0VknXjslcFDo7v5miBAQD9wgMCAAAAAAEGCWOu6fiL4k2tGorpy0wqp3Y1o/v+snxYtNVU/AWZTwAAAAAAAP3///9EixQ6G7DDCT60U0nvqQODFdkcksWcSK1NBGQt70xVHgEAAAAA/f///+66/Ctqc0iWCrEAxcMrIktSZGTbKJe1zYDImEKF+t88AAAAAAD9////qW4Ainy19qgyXQYspp8heWQlIf+00JYV9N7d5PziHlsAAAAAAP3///8R5StPYjPwsxtZbNPHvL1PcVm9fdzTSIpw5XM3l5GtrgEAAAAA/f///7wN4RujVuNYq7oUtz57uH4wMk9BehhDoBAYUICddL7OAAAAAAD9////AiBOAAAAAAAAFgAUqQ0J0HaqDjSnSFAc0SzKaMuSyAkYpTYMAAAAABYAFE5GnvIzBc0VknXjslcFDo7v5miBAkcwRAIgJWHrjLjYzDlhbROVDl4ekJqvv80zg5nbvn7BxfBkm1ACICgcZEMoWb89mC4NEfdgzIH6zZc3MLx4DgkXl2aERhe5ASECuFImsEr/pCkJErET2JAchodWFZRBH8I23TOntlJc11oCRzBEAiAf8crm9Q+iyUxL6qkhQdPY+6aJltWdLBjg+2jPMIrwgQIgDewDjT5bQLqJxoHccafX0YlelaLmIAQlMtNxAv1tPSIBIQK4UiawSv+kKQkSsRPYkByGh1YVlEEfwjbdM6e2UlzXWgJHMEQCIFrLXIJSRF+ooc0caxGJG6JnQK+Cn4STeO3/ElEgE37nAiA41Ua4h2drax5SWFTNIJ23urWnC4FJ/fJCIYBW+PqW/wEhArhSJrBK/6QpCRKxE9iQHIaHVhWUQR/CNt0zp7ZSXNdaAkcwRAIgRO/D6E4xynDsaQw/yU2lH5FOAInJY3onvEyJTWfnSwwCIG1+SG00Z+pSFB4IHyQxz2GlXfhTzZ67HhSpaFJK+leSASECuFImsEr/pCkJErET2JAchodWFZRBH8I23TOntlJc11oCRzBEAiB4O0scb0jwRltI1r1E34NE2KKoUVauO1FmGI+Ihsdv8wIgWlGKQ6vG1NCLUVQgF9rY5QFK+Xq0ak1uHwdgXg8yDwIBIQK4UiawSv+kKQkSsRPYkByGh1YVlEEfwjbdM6e2UlzXWgJHMEQCIBCTFZGuFKwAiBOhIVQPbuQxxRaM1hqbCuhiV/ymvaUbAiBcDikzrE0fhSN+Z0YS/Mq3V29MMz7j8s7vcoxfZNIIywEhArhSJrBK/6QpCRKxE9iQHIaHVhWUQR/CNt0zp7ZSXNda6AsAACIGAvg25tqE9Wjq2wvoAKW6r0JIbeTtmBLmWvPESClHcBumEEojTUsAAACAAQAAAAIAAAAAIgIDgWMExpTSoTs71aOwvTI4vICY9GQjmVux3QMJowCkuucQSiNNSwAAAIAAAAAACQAAAAAiAgJSh3QNd8hanCPh2tLKJmW1yvPGCJVnuOVE95avOo3ofRBKI01LAAAAgAEAAAADAAAAAA=="
)


psbt_sparrow_2of2 = bdk.Psbt(
    "cHNidP8BAH0CAAAAAZ0svZmYG5wsZxEU/H9qh4jtOh1SQERW+jTPtFlmm18TAAAAAAD9////AgUNAAAAAAAAFgAUxUc/gQnm4G76KZFQRpotQDqnnoDYdh4AAAAAACIAIE/0cBumoGFdRHYX6ev3qxCjq+MHev/0Q8MnkYoGsho/6AsAAE8BBDWHzwQIv+2ngAAAAiYdMCe7wldm/tBEMMzLWVLSHUoyDXZDtgQCb8c8r4hFA/o6EJKPhteiNUaNyuk1sgO54DBjpUuk2wYjFMOE7vIDFFqjmkMwAACAAQAAgAAAAIACAACATwEENYfPBJ97aqOAAAACvikbY87UxZQn9pq4CZOFgtSewK/vcwgkQB5eJCgM30EDOOW2H6SP2KlBJVd+uJ4wCNyLV4zhSvL9niR2oQM1tucUVFnyOzAAAIABAACAAAAAgAIAAIAAAQD9BAECAAAABKz+txQqsOQ7IGP+sHP7haqvG7sKQiqEzmgiX68/7F4mAAAAAAD9////+Vjfjei7t8XmPDPan8MTKqPMNoA3QX4oGQxxFMMT8wYAAAAAAP3///8VMLboKLbXv/TI46383rieq8uMixGM3ei8EYWIaftL+AAAAAAA/f///988NE7/uoqwHPRn9BaM+gZBdvqdaRTFYVLkXHoDlYOUAAAAAAD9////AoCEHgAAAAAAIgAgt/fiEYTiusqmNGZ0vZ9hnrdhnzFoZNjIJWT95nNeejyW4A0AAAAAACJRIGFrbwwu8JR/Yk6Ix/ZRButHQ4cuIbUFPunmDsq7jNDoiQsAAAEBK4CEHgAAAAAAIgAgt/fiEYTiusqmNGZ0vZ9hnrdhnzFoZNjIJWT95nNeejwBAwQBAAAAAQVHUSECX+zucCZBa4tPZlGduTxxCaJboosgPUftQcA6uxP6OJ0hA6065kV7Aghs9U3UPkupXP8V+/DPL9lOkQQzIwodrm2IUq4iBgOtOuZFewIIbPVN1D5LqVz/Ffvwzy/ZTpEEMyMKHa5tiBxao5pDMAAAgAEAAIAAAACAAgAAgAAAAAAAAAAAIgYCX+zucCZBa4tPZlGduTxxCaJboosgPUftQcA6uxP6OJ0cVFnyOzAAAIABAACAAAAAgAIAAIAAAAAAAAAAAAAAAQFHUSEC4kV4iWPk9lNftM8IpW23BImiGvtRzB22rCusIktjayghA/BF5sl5K8rhmUUwoy9P3+wlGeXrjtrhnjZJVLxxD++WUq4iAgLiRXiJY+T2U1+0zwilbbcEiaIa+1HMHbasK6wiS2NrKBxao5pDMAAAgAEAAIAAAACAAgAAgAEAAAAAAAAAIgID8EXmyXkryuGZRTCjL0/f7CUZ5euO2uGeNklUvHEP75YcVFnyOzAAAIABAACAAAAAgAIAAIABAAAAAAAAAAA="
)


# Test function for psbt_0_1of1
def test_psbt_0_1of1():
    psbt = SimplePSBT.from_psbt(p2wsh_psbt_0_1of1)
    input_ = psbt.inputs[0]
    input_._get_m_of_n
    assert len(input_.partial_sigs) == 0, "psbt_0_1of1 should have 0 signatures"
    assert not input_.is_fully_signed(), "psbt_0_1of1 should not be fully signed"


# Test function for psbt_1_1of1
def test_psbt_1_1of1():
    psbt = SimplePSBT.from_psbt(p2wsh_psbt_1_1of1)
    input_ = psbt.inputs[0]
    assert input_.final_script_witness, "psbt_1_1of1 should have 1 signature"
    assert input_.is_fully_signed(), "psbt_1_1of1 should be fully signed"


# Test function for psbt_1_2of3
def test_psbt_1_2of3():
    psbt = SimplePSBT.from_psbt(p2wsh_psbt_1_2of3)
    input_ = psbt.inputs[0]
    assert len(input_.partial_sigs) == 1, "psbt_1_2of3 should have 1 signature"
    assert (
        not input_.is_fully_signed()
    ), "psbt_1_2of3 should not be fully signed considering it's a 2 of 3 multisig"


# Test function for psbt_0_2of3
def test_psbt_0_2of3():
    psbt = SimplePSBT.from_psbt(p2wsh_psbt_0_2of3)
    input_ = psbt.inputs[0]
    assert len(input_.partial_sigs) == 0, "psbt_0_2of3 should have 0 signatures"
    assert (
        not input_.is_fully_signed()
    ), "psbt_0_2of3 should not be fully signed considering it's a 2 of 3 multisig"


def test_psbt_optional_fields():
    psbt = SimplePSBT.from_psbt(p2wsh_psbt_0_2of2)
    assert psbt.inputs[0].non_witness_utxo
    psbt.inputs[0].non_witness_utxo.get("input", {}) == [
        {
            "previous_output": "a873ec7d905086acf870db501cfe4b6fa6e4e9d00b68c663127f7a5f637cf5aa:0",
            "script_sig": "",
            "sequence": 4294967293,
            "witness": [
                "304402202b5b33ee680a0a3f1c9d5c29830694aa5ca43daf5cfec43d57fbd76ce2af771702202012e5abaf9690ee9d11a64db63eefd4cf58e5308f5df2e5bad0ba4b44f72c6b01",
                "02fc3fb5d4ff77155ac2bae16a0f8666fd8881eb76b120e4416196ba45368fb45a",
            ],
        }
    ]

    psbt.outputs[0].value == 9999850
    psbt.outputs[0].script_pubkey == "00206fcddedc8359bc8f6b05fea029d4132f8b6e565a71b5e6328062d2739c9efe02"
    psbt.outputs[
        0
    ].witness_script == "522102729c4c6093da33fe4c21ff5181e896ede27dab3b64da9fe704d1dcc3616dd1ea21029065858503bee197c9ba5bb2f5f37171cc6fe36292361ede4aa9f31bd732878952ae"

    psbt.outputs[0].bip32_derivation[0].__dict__ == {
        "fingerprint": "5B3730FB",
        "pubkey": "02729c4c6093da33fe4c21ff5181e896ede27dab3b64da9fe704d1dcc3616dd1ea",
        "derivation_path": "m/48'/1'/0'/2'/0/2",
        "label": "",
    }
    psbt.outputs[0].bip32_derivation[1].__dict__ == {
        "fingerprint": "2597E429",
        "pubkey": "029065858503bee197c9ba5bb2f5f37171cc6fe36292361ede4aa9f31bd7328789",
        "derivation_path": "m/48'/1'/0'/2'/0/2",
        "label": "",
    }


def test_p2sh():
    psbt = SimplePSBT.from_psbt(p2sh_0_2of3)
    assert len(psbt.inputs) == 1
    assert len(psbt.inputs[0].pubkeys) == 3
    assert len(psbt.outputs) == 2


def test_to_txout():
    output_data = {"value": 1000, "script_pubkey": ""}
    unsigned_tx = {"value": 1000, "script_pubkey": ""}

    simple_output = SimpleOutput.from_output(output_data, unsigned_tx)

    txout = simple_output.to_txout()

    assert isinstance(txout, TxOut)  # Should return a TxOut object


def test_electrum_psbt():

    psbt = SimplePSBT.from_psbt(electrum_psbt)
    assert len(psbt.inputs) == 1
    assert len(psbt.inputs[0].pubkeys) == 1
    assert len(psbt.outputs) == 2


def test_psbt_sparrow_2of2():

    psbt = SimplePSBT.from_psbt(psbt_sparrow_2of2)
    assert len(psbt.inputs) == 1
    assert len(psbt.inputs[0].pubkeys) == 2
    assert len(psbt.outputs) == 2
    input_ = psbt.inputs[0]
    # This example PSBT for a 2-of-2 multisig should have two partial signatures (fully signed)
    assert len(input_.partial_sigs) == 0, "Expected 0 signatures"
    assert not input_.is_fully_signed(), "PSBT 2of2 should be fully signed"


def test_tr_psbt():

    psbt = SimplePSBT.from_psbt(tr_psbt_singlesig)
    assert len(psbt.inputs) == 1
    assert len(psbt.inputs[0].pubkeys) == 1
    assert len(psbt.outputs) == 2


def test_p2sh_2of3_fully_signed(
    qtbot: QtBot,
):
    network = bdk.Network.REGTEST
    psbt = SimplePSBT.from_psbt(p2sh_2_2of3)
    input_ = psbt.inputs[0]
    assert len(input_.partial_sigs) == 2, "Expected 2 signatures for fully signed 2of3"
    # assert   input_.is_fully_signed(), "PSBT should be fully signed"

    signer = AbstractSignatureImporter(network=network)

    with qtbot.waitSignal(signer.signal_final_tx_received, timeout=1000) as blocker:
        # expect to finish the psbt
        signer.handle_data_input(original_psbt=p2sh_0_2of3, data=Data.from_psbt(p2sh_2_2of3, network=network))

        arg = blocker.args[0]

        assert isinstance(arg, bdk.Transaction)
        assert serialized_to_hex(arg.serialize()) == finalized_p2sh_2_2of3
