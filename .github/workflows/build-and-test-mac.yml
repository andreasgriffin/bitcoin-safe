name: Build and Test MacOS DMG

on:
  workflow_dispatch:
    inputs:
      commitHash:
        description: 'Enter the commit hash to build (leave empty to use the default branch or the branch that triggered the workflow)'
        required: false
        type: string 

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        # Building on macos-14 produces an arm64 DMG,
        # and building on macos-13 produces an x86 DMG.
        # see available: https://github.com/actions/runner-images?tab=readme-ov-file#available-images
        include:
          - os: macos-14
            artifact_name: dmgs-arm64
          # - os: macos-13
          #   artifact_name: dmgs-x86_64
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for all branches and tags
          ref: ${{ github.event.inputs.commitHash || github.sha }}

      - name: Set up Python environment
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          poetry install  
  
      - name: Run build script
        run: poetry run python tools/build.py --targets mac --commit None

      - name: Check for DMG file
        run: |
          if [ -z "$(find dist -type f -name '*.dmg')" ]; then
            echo "DMG file is missing"
            exit 1
          fi

      - name: Upload DMG Files from dist/
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: dist/*.dmg

  test:
    needs: build
    strategy:
      matrix:
        include:
          - arch: arm64
            runner: macos-15  # This runner must be an arm64 machine
            artifact_name: dmgs-arm64
          # - arch: x86_64
          #   runner: macos-13    # This runner must be an x86 machine
          #   artifact_name: dmgs-x86_64
    runs-on: ${{ matrix.runner }}
    steps:
      - name: Download DMG Artifact for ${{ matrix.arch }}
        uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: dmgs

      - name: Test DMG file on ${{ matrix.arch }}
        run: |
          # Find the DMG file from the downloaded artifacts.
          DMG_FILE=$(find dmgs -type f -name '*.dmg' | head -n 1)
          if [ -z "$DMG_FILE" ]; then
            echo "No DMG file found to test."
            exit 1
          fi
          echo "Found DMG file: $DMG_FILE" | tee test_dmg.log
          
          # Mount the DMG.
          echo "Mounting DMG file..." | tee -a test_dmg.log
          MOUNT_OUTPUT=$(hdiutil attach "$DMG_FILE")
          echo "$MOUNT_OUTPUT" | tee -a test_dmg.log
          
          # Extract the mount point (assuming the output contains a /Volumes entry).
          MOUNT_POINT=$(echo "$MOUNT_OUTPUT" | grep /Volumes | awk '{print $3}')
          if [ -z "$MOUNT_POINT" ]; then
            echo "Failed to mount DMG file" | tee -a test_dmg.log
            exit 1
          fi
          echo "DMG mounted at: $MOUNT_POINT" | tee -a test_dmg.log
          
          # Find the .app bundle within the mounted DMG.
          APP_PATH=$(find "$MOUNT_POINT" -maxdepth 1 -name '*.app' | head -n 1)
          if [ -z "$APP_PATH" ]; then
            echo "No .app found in mounted DMG" | tee -a test_dmg.log
            exit 1
          fi
          echo "Found app at: $APP_PATH" | tee -a test_dmg.log
           
          # Open the app using the 'open' command
          echo "Launching app via open" | tee -a test_dmg.log
          open "$APP_PATH"

          # Wait 10 seconds for the app to run
          echo "Waiting 10 seconds..." | tee -a test_dmg.log
          sleep 10

          # Terminate the app.
          # Using 'killall' will kill all processes with the given app name.
          # Replace "Bitcoin_Safe" with the exact process name if different.
          echo "Terminating the app using killall" | tee -a test_dmg.log
          killall "Bitcoin_Safe" || true
          echo "Application terminated" | tee -a test_dmg.log

          
          
          # Optionally, you can run further tests against the application.
          
          # Detach the DMG.
          echo "Detaching DMG..." | tee -a test_dmg.log
          hdiutil detach "$MOUNT_POINT" | tee -a test_dmg.log
          echo "DMG detached successfully" | tee -a test_dmg.log
        shell: bash

      - name: Upload DMG and Application Logs for ${{ matrix.arch }}
        uses: actions/upload-artifact@v4
        with:
          name: logs-${{ matrix.arch }}
          path: |
            test_dmg.log
            "$HOME/Library/Application Support/bitcoin_safe/*.log*"

